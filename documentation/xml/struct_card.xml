<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_card" kind="struct" language="C++" prot="public">
    <compoundname>Card</compoundname>
    <includes refid="utils_8h" local="no">utils.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string Card::rank</definition>
        <argsstring></argsstring>
        <name>rank</name>
        <briefdescription>
<para>The rank. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.h" line="30" column="1" bodyfile="utils.h" bodystart="30" bodyend="-1"/>
        <referencedby refid="class_bot0_1a5a2c52f895081ec8434f23a7741afb7d" compoundref="_player_8cpp" startline="290" endline="340">Bot0::Bot0</referencedby>
        <referencedby refid="class_bot1_1a52f6ff001807c02062432b57d3b8ee50" compoundref="_player_8cpp" startline="495" endline="547">Bot1::Bot1</referencedby>
        <referencedby refid="class_bot2_1a4c3dc7d64d72681c49b7957c67d9db2f" compoundref="_player_8cpp" startline="696" endline="750">Bot2::Bot2</referencedby>
        <referencedby refid="utils_8h_1a099be8692473d7f3fbde4e56a6b580a0" compoundref="utils_8cpp" startline="15" endline="53">createDeck</referencedby>
        <referencedby refid="class_human_1a999dc62cfd6b2dbf13f6899a66aa488b" compoundref="_player_8cpp" startline="919" endline="971">Human::Human</referencedby>
        <referencedby refid="utils_8h_1a972bfcad488ad7738c01df1d1c24de6b" compoundref="utils_8cpp" startline="6" endline="8">operator&lt;&lt;</referencedby>
        <referencedby refid="struct_card_1aca435a7f87f91bc1008328c272ac0e8c" compoundref="utils_8h" startline="49" endline="52">operator==</referencedby>
      </memberdef>
      <memberdef kind="variable" id="struct_card_1a7fb7aca081009665a828df85f8778a91" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string Card::suits</definition>
        <argsstring></argsstring>
        <name>suits</name>
        <briefdescription>
<para>The suits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.h" line="32" column="1" bodyfile="utils.h" bodystart="32" bodyend="-1"/>
        <referencedby refid="class_bot0_1a5a2c52f895081ec8434f23a7741afb7d" compoundref="_player_8cpp" startline="290" endline="340">Bot0::Bot0</referencedby>
        <referencedby refid="class_bot1_1a52f6ff001807c02062432b57d3b8ee50" compoundref="_player_8cpp" startline="495" endline="547">Bot1::Bot1</referencedby>
        <referencedby refid="class_bot2_1a4c3dc7d64d72681c49b7957c67d9db2f" compoundref="_player_8cpp" startline="696" endline="750">Bot2::Bot2</referencedby>
        <referencedby refid="utils_8h_1a099be8692473d7f3fbde4e56a6b580a0" compoundref="utils_8cpp" startline="15" endline="53">createDeck</referencedby>
        <referencedby refid="class_human_1a999dc62cfd6b2dbf13f6899a66aa488b" compoundref="_player_8cpp" startline="919" endline="971">Human::Human</referencedby>
        <referencedby refid="utils_8h_1a972bfcad488ad7738c01df1d1c24de6b" compoundref="utils_8cpp" startline="6" endline="8">operator&lt;&lt;</referencedby>
      </memberdef>
      <memberdef kind="variable" id="struct_card_1a93a6c9c8f00ffb249244dc3171cd3e5d" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Card::score</definition>
        <argsstring></argsstring>
        <name>score</name>
        <briefdescription>
<para>The score. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.h" line="34" column="1" bodyfile="utils.h" bodystart="34" bodyend="-1"/>
        <referencedby refid="class_bot1_1aaa5fc1e84b013c6f8d70b53658ffc156" compoundref="_player_8cpp" startline="670" endline="679">Bot1::addCount</referencedby>
        <referencedby refid="class_bot2_1a6b9b7841dcec84a12d365c6c226c2bb1" compoundref="_player_8cpp" startline="822" endline="830">Bot2::addCount</referencedby>
        <referencedby refid="class_bot0_1a5a2c52f895081ec8434f23a7741afb7d" compoundref="_player_8cpp" startline="290" endline="340">Bot0::Bot0</referencedby>
        <referencedby refid="class_bot1_1a52f6ff001807c02062432b57d3b8ee50" compoundref="_player_8cpp" startline="495" endline="547">Bot1::Bot1</referencedby>
        <referencedby refid="class_bot2_1a4c3dc7d64d72681c49b7957c67d9db2f" compoundref="_player_8cpp" startline="696" endline="750">Bot2::Bot2</referencedby>
        <referencedby refid="utils_8h_1a099be8692473d7f3fbde4e56a6b580a0" compoundref="utils_8cpp" startline="15" endline="53">createDeck</referencedby>
        <referencedby refid="class_human_1a999dc62cfd6b2dbf13f6899a66aa488b" compoundref="_player_8cpp" startline="919" endline="971">Human::Human</referencedby>
        <referencedby refid="class_bot1_1a9d132799a74f0956dd3b66a897cf8824" compoundref="_player_8cpp" startline="549" endline="663">Bot1::play</referencedby>
        <referencedby refid="class_bot1_1a5a6f599a48d7703753df2dcb0f18a904" compoundref="_player_8cpp" startline="381" endline="402">Bot1::split</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_card_1aca435a7f87f91bc1008328c272ac0e8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Card::operator==</definition>
        <argsstring>(const Card &amp;a) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="struct_card" kindref="compound">Card</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_card" kindref="compound">Card</ref> to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the parameters are considered equivalent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.h" line="49" column="1" bodyfile="utils.h" bodystart="49" bodyend="52"/>
        <references refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" compoundref="utils_8h" startline="30">rank</references>
      </memberdef>
      <memberdef kind="function" id="struct_card_1a0b7554519cc029294c1c7e42b591d995" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Card::operator==</definition>
        <argsstring>(const string &amp;a) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const string &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the parameters are considered equivalent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.h" line="67" column="1" bodyfile="utils.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="struct_card_1a49ad8f46a6afbe2edd535039681ac004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; Card::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;out)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.h" line="71" column="1" bodyfile="utils.h" bodystart="71" bodyend="91"/>
        <references refid="utils_8h_1a9e6ae0faec755ce8693bfc0d4692e15c" compoundref="utils_8cpp" startline="255" endline="276">BinaryInt</references>
        <references refid="utils_8h_1a099be8692473d7f3fbde4e56a6b580a0" compoundref="utils_8cpp" startline="15" endline="53">createDeck</references>
        <references refid="utils_8h_1aa224290174d6cbc5ab1691cb6aa3c92b" compoundref="utils_8cpp" startline="227" endline="240">FileCopy</references>
        <references refid="utils_8h_1a778f88815f581f9e2eeca1f197b0d7bf" compoundref="utils_8cpp" startline="242" endline="253">FileExist</references>
        <references refid="utils_8h_1a012b4131b66a528fc555765be1f76dad" compoundref="utils_8cpp" startline="55" endline="74">getHumanPlay</references>
        <references refid="utils_8h_1a972bfcad488ad7738c01df1d1c24de6b" compoundref="utils_8cpp" startline="6" endline="8">operator&lt;&lt;</references>
        <references refid="utils_8h_1a7b2049483feeea98ff61c00d763b4fb5" compoundref="utils_8cpp" startline="133" endline="146">readBinary</references>
        <references refid="utils_8h_1ada25d6610efd2d1c473deb3289e0809d" compoundref="utils_8cpp" startline="161" endline="173">readCharYorN</references>
        <references refid="utils_8h_1aa5de12b8cd82d61b545a85ea991944a3" compoundref="utils_8cpp" startline="148" endline="160">readFloat</references>
        <references refid="utils_8h_1ac4dc9964d286ddbbd2a108991190d39d" compoundref="utils_8cpp" startline="119" endline="131">readInt</references>
        <references refid="utils_8h_1a5f5b6dc9dfd4ca8f5bf107d3cbac9cb4" compoundref="utils_8cpp" startline="91" endline="103">readIntBetween</references>
        <references refid="utils_8h_1acefd5a7062e81e56767fbfa11f6065e4" compoundref="utils_8cpp" startline="338" endline="347">readNameOfFile</references>
        <references refid="utils_8h_1a55b3de51bc5631fb67d6681f33e52228" compoundref="utils_8cpp" startline="105" endline="118">readUnsignedInt</references>
        <references refid="utils_8h_1a685ffa2d206caa9be692206e68284cb4" compoundref="utils_8cpp" startline="76" endline="88">readUnsignedIntBetween</references>
        <references refid="utils_8h_1a59ba61591a389ad07561671807e5b3cf" compoundref="utils_8cpp" startline="278" endline="336">saveChanges</references>
        <references refid="utils_8h_1a11166113d21454c8d054735425e5d496" compoundref="utils_8cpp" startline="177" endline="225">Users</references>
        <references refid="utils_8h_1a436341e0fbeaefa986ca6d17c4a475b9" compoundref="utils_8cpp" startline="349" endline="357">waitXTime</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A card. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016 </para></simplesect>
</para>    </detaileddescription>
    <location file="utils.h" line="28" column="1" bodyfile="utils.h" bodystart="28" bodyend="93"/>
    <listofallmembers>
      <member refid="struct_card_1a49ad8f46a6afbe2edd535039681ac004" prot="public" virt="non-virtual"><scope>Card</scope><name>operator&lt;&lt;</name></member>
      <member refid="struct_card_1aca435a7f87f91bc1008328c272ac0e8c" prot="public" virt="non-virtual"><scope>Card</scope><name>operator==</name></member>
      <member refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" prot="public" virt="non-virtual"><scope>Card</scope><name>operator==</name></member>
      <member refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" prot="public" virt="non-virtual"><scope>Card</scope><name>rank</name></member>
      <member refid="struct_card_1a93a6c9c8f00ffb249244dc3171cd3e5d" prot="public" virt="non-virtual"><scope>Card</scope><name>score</name></member>
      <member refid="struct_card_1a7fb7aca081009665a828df85f8778a91" prot="public" virt="non-virtual"><scope>Card</scope><name>suits</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
