<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="utils_8cpp" kind="file" language="C++">
    <compoundname>utils.cpp</compoundname>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <incdepgraph>
      <node id="185">
        <label>iomanip</label>
      </node>
      <node id="179">
        <label>utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>string</label>
      </node>
      <node id="184">
        <label>fstream</label>
      </node>
      <node id="178">
        <label>utils.cpp</label>
        <link refid="utils_8cpp"/>
        <childnode refid="179" relation="include">
        </childnode>
      </node>
      <node id="182">
        <label>vector</label>
      </node>
      <node id="183">
        <label>cstdlib</label>
      </node>
      <node id="180">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="utils_8cpp_1ab279d64fd0ff5d0b510636f78b3b06e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Card &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_card" kindref="compound">Card</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Stream insertion operator. Makes the display of a card on the terminal. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The outstream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="struct_card" kindref="compound">Card</ref> to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ostream produced. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="6" column="1" bodyfile="utils.cpp" bodystart="6" bodyend="8"/>
        <references refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" compoundref="utils_8h" startline="29">Card::rank</references>
        <references refid="struct_card_1a7fb7aca081009665a828df85f8778a91" compoundref="utils_8h" startline="31">Card::suits</references>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a9e5126bb63a37c606ccf5568d6be42b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const vector&lt; Card &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="struct_card" kindref="compound">Card</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Stream insertion operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The outstream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of cards to process.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ostream produced. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="9" column="1" bodyfile="utils.cpp" bodystart="9" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a7ab9ca131650f2684140e6906b0e04b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="struct_card" kindref="compound">Card</ref> &gt;</type>
        <definition>vector&lt; Card &gt; createDeck</definition>
        <argsstring>()</argsstring>
        <name>createDeck</name>
        <briefdescription>
<para>Creates the deck. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<simplesect kind="return"><para>The new deck. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="15" column="1" bodyfile="utils.cpp" bodystart="15" bodyend="53"/>
        <references refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" compoundref="utils_8h" startline="29">Card::rank</references>
        <references refid="struct_card_1a93a6c9c8f00ffb249244dc3171cd3e5d" compoundref="utils_8h" startline="33">Card::score</references>
        <references refid="struct_card_1a7fb7aca081009665a828df85f8778a91" compoundref="utils_8h" startline="31">Card::suits</references>
        <referencedby refid="class_dealer_1a518fd02cf57eaf55e06b7754c4649a3f" compoundref="_dealer_8cpp" startline="8" endline="15">Dealer::Dealer</referencedby>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a012b4131b66a528fc555765be1f76dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string getHumanPlay</definition>
        <argsstring>()</argsstring>
        <name>getHumanPlay</name>
        <briefdescription>
<para>Gets human play. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<simplesect kind="return"><para>The human play. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="55" column="1" bodyfile="utils.cpp" bodystart="55" bodyend="70"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
        <referencedby refid="class_human_1ac2536a8f230ba6dd457b81e406f42a60" compoundref="_player_8cpp" startline="704" endline="723">Human::play</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a685ffa2d206caa9be692206e68284cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short int</type>
        <definition>unsigned short int readUnsignedIntBetween</definition>
        <argsstring>(unsigned int minValue, unsigned int maxValue)</argsstring>
        <name>readUnsignedIntBetween</name>
        <param>
          <type>unsigned int</type>
          <declname>minValue</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>maxValue</declname>
        </param>
        <briefdescription>
<para>Reads unsigned int between a minimum and a maximum values. Ask for user input. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A unsigned int between the parameters set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="72" column="1" bodyfile="utils.cpp" bodystart="72" bodyend="84"/>
        <referencedby refid="class_human_1abbda834a6084c05134b25db5c00ac876" compoundref="_player_8cpp" startline="686" endline="702">Human::bet</referencedby>
        <referencedby refid="class_casino_1a944f6c61313dd0b23a050c2c07f8d29e" compoundref="_casino_8cpp" startline="470" endline="579">Casino::create</referencedby>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
        <referencedby refid="class_table_1a7a83e0ed662f82198797b1a8aa8cc4ea" compoundref="_table_8cpp" startline="84" endline="105">Table::play</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a5f5b6dc9dfd4ca8f5bf107d3cbac9cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readIntBetween</definition>
        <argsstring>(int min, int max)</argsstring>
        <name>readIntBetween</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Reads int between a minimum and a maximum values. Ask for user input. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The int between the parameters set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="87" column="1" bodyfile="utils.cpp" bodystart="87" bodyend="99"/>
        <referencedby refid="cmd_u_i_8h_1a6b96de8bf548d42406d7e77b2ed24d82" compoundref="cmd_u_i_8cpp" startline="135" endline="140">createMenu</referencedby>
        <referencedby refid="cmd_u_i_8h_1a2451dbf01b864018c05fe791e91d32d1" compoundref="cmd_u_i_8cpp" startline="142" endline="147">deleteMenu</referencedby>
        <referencedby refid="cmd_u_i_8h_1a2aa92df8c5017fd8386360c516dd21f7" compoundref="cmd_u_i_8cpp" startline="128" endline="133">manageCasino</referencedby>
        <referencedby refid="cmd_u_i_8h_1a071e1dea251b139583ae532689698d87" compoundref="cmd_u_i_8cpp" startline="149" endline="154">manageTableMenu</referencedby>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
        <referencedby refid="cmd_u_i_8h_1a4c6d8a30cfef3b6adeff15978a5cf917" compoundref="cmd_u_i_8cpp" startline="84" endline="126">start_menu</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a55b3de51bc5631fb67d6681f33e52228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int readUnsignedInt</definition>
        <argsstring>()</argsstring>
        <name>readUnsignedInt</name>
        <briefdescription>
<para>Reads unsigned int. Asks for user input. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<simplesect kind="return"><para>The unsigned int. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="101" column="1" bodyfile="utils.cpp" bodystart="101" bodyend="114"/>
        <referencedby refid="class_casino_1a944f6c61313dd0b23a050c2c07f8d29e" compoundref="_casino_8cpp" startline="470" endline="579">Casino::create</referencedby>
        <referencedby refid="class_casino_1a34dc3475e5bdbae7ebee3ab991d4c805" compoundref="_casino_8cpp" startline="581" endline="663">Casino::eliminate</referencedby>
        <referencedby refid="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="main_8cpp" startline="13" endline="168">main</referencedby>
        <referencedby refid="class_casino_1acafc79028d02c97ac115c9dad1bce6eb" compoundref="_casino_8cpp" startline="429" endline="468">Casino::manage</referencedby>
        <referencedby refid="class_casino_1aeae4b2414f1163d4383afd4a7c57f6ca" compoundref="_casino_8cpp" startline="665" endline="803">Casino::manageTables</referencedby>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1ac4dc9964d286ddbbd2a108991190d39d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readInt</definition>
        <argsstring>()</argsstring>
        <name>readInt</name>
        <briefdescription>
<para>Reads a int value. Asks for user input. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<simplesect kind="return"><para>The int inserted by the user. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="115" column="1" bodyfile="utils.cpp" bodystart="115" bodyend="127"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
        <referencedby refid="class_casino_1a437b52a25414c25c250c52df98db027a" compoundref="_casino_8cpp" startline="395" endline="409">Casino::selectTable</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a7b2049483feeea98ff61c00d763b4fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readBinary</definition>
        <argsstring>()</argsstring>
        <name>readBinary</name>
        <briefdescription>
<para>Reads a 0 or a 1 from user input. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<simplesect kind="return"><para>The user input. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="129" column="1" bodyfile="utils.cpp" bodystart="129" bodyend="142"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
        <referencedby refid="class_human_1ac406bdd47735f87dec9965b8a86d32ed" compoundref="_player_8cpp" startline="645" endline="660">Human::split</referencedby>
        <referencedby refid="class_human_1af6cc17fa0b07ceadde23d352c1204719" compoundref="_player_8cpp" startline="631" endline="643">Human::takeInsurance</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1aa5de12b8cd82d61b545a85ea991944a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float readFloat</definition>
        <argsstring>()</argsstring>
        <name>readFloat</name>
        <briefdescription>
<para>Reads a float from user input. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<simplesect kind="return"><para>The float inputed by the user. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="144" column="1" bodyfile="utils.cpp" bodystart="144" bodyend="156"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1ada25d6610efd2d1c473deb3289e0809d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char readCharYorN</definition>
        <argsstring>()</argsstring>
        <name>readCharYorN</name>
        <briefdescription>
<para>Reads character &quot;y&quot; or &quot;n&quot;. Case insensitive. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<simplesect kind="return"><para>The character inserted by the user: &quot;y&quot; or &quot;n&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="157" column="1" bodyfile="utils.cpp" bodystart="157" bodyend="169"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a11166113d21454c8d054735425e5d496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Users</definition>
        <argsstring>(vector&lt; int &gt; &amp;usersVEC, int &amp;user)</argsstring>
        <name>Users</name>
        <param>
          <type>vector&lt; int &gt; &amp;</type>
          <declname>usersVEC</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Reads and parses the users file to usersVec. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">usersVEC</parametername>
</parameternamelist>
<parameterdescription>
<para>The users vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">user</parametername>
</parameternamelist>
<parameterdescription>
<para>The user id. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="173" column="1" bodyfile="utils.cpp" bodystart="173" bodyend="221"/>
        <referencedby refid="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="main_8cpp" startline="13" endline="168">main</referencedby>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
        <referencedby refid="utils_8h_1a59ba61591a389ad07561671807e5b3cf" compoundref="utils_8cpp" startline="274" endline="332">saveChanges</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1aa224290174d6cbc5ab1691cb6aa3c92b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FileCopy</definition>
        <argsstring>(string filetxt, string filetxt_temp)</argsstring>
        <name>FileCopy</name>
        <param>
          <type>string</type>
          <declname>filetxt</declname>
        </param>
        <param>
          <type>string</type>
          <declname>filetxt_temp</declname>
        </param>
        <briefdescription>
<para>Copies text between files. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filetxt</parametername>
</parameternamelist>
<parameterdescription>
<para>The file name; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filetxt_temp</parametername>
</parameternamelist>
<parameterdescription>
<para>The temporary file name; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="223" column="1" bodyfile="utils.cpp" bodystart="223" bodyend="236"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a778f88815f581f9e2eeca1f197b0d7bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool FileExist</definition>
        <argsstring>(string filetxt_temp)</argsstring>
        <name>FileExist</name>
        <param>
          <type>string</type>
          <declname>filetxt_temp</declname>
        </param>
        <briefdescription>
<para>Checks if the file with name filetxt_temp exists. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filetxt_temp</parametername>
</parameternamelist>
<parameterdescription>
<para>The temporary file name;</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if it exists, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="238" column="1" bodyfile="utils.cpp" bodystart="238" bodyend="249"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a9e6ae0faec755ce8693bfc0d4692e15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BinaryInt</definition>
        <argsstring>(int id, vector&lt; int &gt; VEC)</argsstring>
        <name>BinaryInt</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>VEC</declname>
        </param>
        <briefdescription>
<para>Performs a binary search of id in VEC. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VEC</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of id in Vec, or -1 if id was not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="251" column="1" bodyfile="utils.cpp" bodystart="251" bodyend="272"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
        <referencedby refid="utils_8h_1a59ba61591a389ad07561671807e5b3cf" compoundref="utils_8cpp" startline="274" endline="332">saveChanges</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1a59ba61591a389ad07561671807e5b3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int saveChanges</definition>
        <argsstring>(vector&lt; int &gt; &amp;usersVEC, int &amp;user, pair&lt; int, int &gt; xy, int &amp;save)</argsstring>
        <name>saveChanges</name>
        <param>
          <type>vector&lt; int &gt; &amp;</type>
          <declname>usersVEC</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>user</declname>
        </param>
        <param>
          <type>pair&lt; int, int &gt;</type>
          <declname>xy</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>save</declname>
        </param>
        <briefdescription>
<para>Asks user to save the current status when exiting. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">usersVEC</parametername>
</parameternamelist>
<parameterdescription>
<para>The users vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">user</parametername>
</parameternamelist>
<parameterdescription>
<para>The user id. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair with horizontal and vertical lengths of the terminal. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">save</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean that holds user option to save or not the changes made.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of operation success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="274" column="1" bodyfile="utils.cpp" bodystart="274" bodyend="332"/>
        <references refid="utils_8cpp_1a9e6ae0faec755ce8693bfc0d4692e15c" compoundref="utils_8cpp" startline="251" endline="272">BinaryInt</references>
        <references refid="utils_8cpp_1a11166113d21454c8d054735425e5d496" compoundref="utils_8cpp" startline="173" endline="221">Users</references>
        <referencedby refid="main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="main_8cpp" startline="13" endline="168">main</referencedby>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="utils_8cpp_1acefd5a7062e81e56767fbfa11f6065e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readNameOfFile</definition>
        <argsstring>(string &amp;fileName)</argsstring>
        <name>readNameOfFile</name>
        <param>
          <type>string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Ask user to input a file name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Renato Campos </para></simplesect>
<simplesect kind="date"><para>19/11/2016</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>A string that will be updated with the user input.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 in case of success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utils.cpp" line="334" column="1" bodyfile="utils.cpp" bodystart="334" bodyend="343"/>
        <referencedby refid="struct_card_1a0b7554519cc029294c1c7e42b591d995" compoundref="utils_8h" startline="66" endline="69">Card::operator==</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils_8h" kindref="compound">utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="utils_8h_1a972bfcad488ad7738c01df1d1c24de6b" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="utils_8cpp_1ab279d64fd0ff5d0b510636f78b3b06e5" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_card" kindref="compound">Card</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>&lt;&lt;<sp/>c.<ref refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" kindref="member">rank</ref><sp/>&lt;&lt;<sp/>c.<ref refid="struct_card_1a7fb7aca081009665a828df85f8778a91" kindref="member">suits</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9" refid="utils_8h_1a994a59f31545d6cd0ca004b1ad668a87" refkind="member"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/>const<sp/>vector&lt;Card&gt;&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>v.at(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15" refid="utils_8h_1a099be8692473d7f3fbde4e56a6b580a0" refkind="member"><highlight class="normal">vector&lt;Card&gt;<sp/><ref refid="utils_8cpp_1a7ab9ca131650f2684140e6906b0e04b0" kindref="member">createDeck</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>vector<sp/>&lt;string&gt;<sp/>suits<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Heart&quot;</highlight><highlight class="normal"><sp/>,</highlight><highlight class="stringliteral">&quot;Diamond&quot;</highlight><highlight class="normal"><sp/>,</highlight><highlight class="stringliteral">&quot;Club&quot;</highlight><highlight class="normal"><sp/>,</highlight><highlight class="stringliteral">&quot;Spade&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ranks<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A234567890JQK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_card" kindref="compound">Card</ref><sp/>newCard;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>vector<sp/>&lt;Card&gt;<sp/>deck;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ranks.length();<sp/>i++)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>suits.size();<sp/>j++)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a7fb7aca081009665a828df85f8778a91" kindref="member">suits</ref><sp/>=<sp/>suits.at(j);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" kindref="member">rank</ref><sp/>=<sp/>ranks.at(i);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a93a6c9c8f00ffb249244dc3171cd3e5d" kindref="member">score</ref><sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>9)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a7fb7aca081009665a828df85f8778a91" kindref="member">suits</ref><sp/>=<sp/>suits.at(j);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" kindref="member">rank</ref><sp/>=<sp/>ranks.at(i);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a93a6c9c8f00ffb249244dc3171cd3e5d" kindref="member">score</ref><sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a7fb7aca081009665a828df85f8778a91" kindref="member">suits</ref><sp/>=<sp/>suits.at(j);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" kindref="member">rank</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a93a6c9c8f00ffb249244dc3171cd3e5d" kindref="member">score</ref><sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a7fb7aca081009665a828df85f8778a91" kindref="member">suits</ref><sp/>=<sp/>suits.at(j);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a8e524627138cbbd914b5ab90e05b3c41" kindref="member">rank</ref><sp/>=<sp/>ranks.at(i);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCard.<ref refid="struct_card_1a93a6c9c8f00ffb249244dc3171cd3e5d" kindref="member">score</ref><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deck.push_back(newCard);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deck;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="utils_8h_1a012b4131b66a528fc555765be1f76dad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a012b4131b66a528fc555765be1f76dad" kindref="member">getHumanPlay</ref>()</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>option;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>getline(cin,<sp/>option);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(option<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;hit&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>option<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;stand&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>option<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;HIT&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>option<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;STAND&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>option<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;Hit&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>option<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;Stand&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>insert<sp/>a<sp/>valid<sp/>entry:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getline(cin,<sp/>option);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(option<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;HIT&quot;</highlight><highlight class="normal"><sp/>||<sp/>option<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hit&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hit&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(option<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Stand&quot;</highlight><highlight class="normal"><sp/>||<sp/>option<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;STAND&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stand&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>option;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="utils_8h_1a685ffa2d206caa9be692206e68284cb4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a685ffa2d206caa9be692206e68284cb4" kindref="member">readUnsignedIntBetween</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minValue,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>maxValue){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>newInt;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Insert<sp/>Value<sp/>(<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>minValue<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxValue<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)<sp/>:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(cin<sp/>&gt;&gt;<sp/>newInt)<sp/>||<sp/>newInt<sp/>&gt;<sp/>maxValue<sp/>||<sp/>newInt<sp/>&lt;<sp/>minValue)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.clear();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Value:<sp/>Insert<sp/>a<sp/>new<sp/>one:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newInt;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="utils_8h_1a5f5b6dc9dfd4ca8f5bf107d3cbac9cb4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a5f5b6dc9dfd4ca8f5bf107d3cbac9cb4" kindref="member">readIntBetween</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newInt;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Insert<sp/>a<sp/>value:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!(cin<sp/>&gt;&gt;<sp/>newInt)<sp/>||<sp/>newInt<sp/>&gt;<sp/>max<sp/>||<sp/>newInt<sp/>&lt;<sp/>min)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.clear();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>value,<sp/>value<sp/>between<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>min<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newInt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="utils_8h_1a55b3de51bc5631fb67d6681f33e52228" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a55b3de51bc5631fb67d6681f33e52228" kindref="member">readUnsignedInt</ref>()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newUnsignedInt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Insira<sp/>um<sp/>valor:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(cin<sp/>&gt;&gt;<sp/>newUnsignedInt))<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.clear();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Valor<sp/>inválido,<sp/>insira<sp/>um<sp/>novo<sp/>valor<sp/>unsigned<sp/>int:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newUnsignedInt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115" refid="utils_8h_1ac4dc9964d286ddbbd2a108991190d39d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1ac4dc9964d286ddbbd2a108991190d39d" kindref="member">readInt</ref>()<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newInt;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Insira<sp/>um<sp/>valor:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(cin<sp/>&gt;&gt;<sp/>newInt))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.clear();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Valor<sp/>inválido,<sp/>insira<sp/>um<sp/>novo<sp/>valor<sp/>unsigned<sp/>int:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newInt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="utils_8h_1a7b2049483feeea98ff61c00d763b4fb5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a7b2049483feeea98ff61c00d763b4fb5" kindref="member">readBinary</ref>(){</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>value;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>0<sp/>||<sp/>value<sp/>!=<sp/>1){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.clear();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Valor<sp/>inválido,<sp/>insira<sp/>0<sp/>ou<sp/>1:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="utils_8h_1aa5de12b8cd82d61b545a85ea991944a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1aa5de12b8cd82d61b545a85ea991944a3" kindref="member">readFloat</ref>()<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>newFloat;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Insira<sp/>um<sp/>novo<sp/>valor:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(cin<sp/>&gt;&gt;<sp/>newFloat))<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.clear();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Valor<sp/>invalido,<sp/>insira<sp/>um<sp/>novo<sp/>valor:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newFloat;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157" refid="utils_8h_1ada25d6610efd2d1c473deb3289e0809d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1ada25d6610efd2d1c473deb3289e0809d" kindref="member">readCharYorN</ref>()<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>newChar;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Insira<sp/>o<sp/>caracter:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(cin<sp/>&gt;&gt;<sp/>newChar)<sp/>||<sp/>(newChar<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>newChar<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>newChar<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>newChar<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.clear();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Caracter<sp/>invalido,<sp/>insira<sp/>um<sp/>novo<sp/>caracter:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>cin.ignore();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newChar;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//Paralel<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="utils_8h_1a11166113d21454c8d054735425e5d496" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a11166113d21454c8d054735425e5d496" kindref="member">Users</ref>(vector<sp/>&lt;int&gt;<sp/>&amp;usersVEC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;user)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>UserFileI(</highlight><highlight class="stringliteral">&quot;users_temp.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>find<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UserFileI.is_open())</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usersVEC.clear();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getline(UserFileI,<sp/>line))<sp/></highlight><highlight class="comment">//enquanto<sp/>houver<sp/>linhas<sp/>no<sp/>ficheiro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usersVEC.push_back(stoi(line,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>10));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserFileI.close();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>usersVEC.size();<sp/>i++)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user<sp/>==<sp/>usersVEC.at(i))</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(find<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usersVEC.size()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usersVEC.push_back(usersVEC.back()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user<sp/>=<sp/>usersVEC.back();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usersVEC.push_back(1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user<sp/>=<sp/>usersVEC.back();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usersVEC.push_back(1);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user<sp/>=<sp/>usersVEC.back();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>UserFileO(</highlight><highlight class="stringliteral">&quot;users_temp.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UserFileO.is_open())</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>usersVEC.size();<sp/>i++)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserFileO<sp/>&lt;&lt;<sp/>usersVEC.at(i)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserFileO.close();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="utils_8h_1aa224290174d6cbc5ab1691cb6aa3c92b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1aa224290174d6cbc5ab1691cb6aa3c92b" kindref="member">FileCopy</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filetxt,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filetxt_temp)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>File(filetxt);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>File_temp(filetxt_temp);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(File.is_open()<sp/>&amp;&amp;<sp/>File_temp.is_open())</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getline(File_temp,<sp/>line))</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File.close();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File_temp.close();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="utils_8h_1a778f88815f581f9e2eeca1f197b0d7bf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a778f88815f581f9e2eeca1f197b0d7bf" kindref="member">FileExist</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filetxt_temp)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>file(filetxt_temp);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.is_open())</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="utils_8h_1a9e6ae0faec755ce8693bfc0d4692e15c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a9e6ae0faec755ce8693bfc0d4692e15c" kindref="member">BinaryInt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>vector<sp/>&lt;int&gt;<sp/>VEC)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>highindex<sp/>=<sp/>VEC.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lowindex<sp/>&lt;=<sp/>highindex)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(highindex<sp/>+<sp/>lowindex)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>VEC.at(i))</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>VEC.at(i))</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highindex<sp/>=<sp/>i<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;<sp/>VEC.at(i))</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowindex<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="utils_8h_1a59ba61591a389ad07561671807e5b3cf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1a59ba61591a389ad07561671807e5b3cf" kindref="member">saveChanges</ref>(vector<sp/>&lt;int&gt;<sp/>&amp;usersVEC,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;user,<sp/>pair<sp/>&lt;int,<sp/>int&gt;<sp/>xy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;save)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>decision;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils_8cpp_1a11166113d21454c8d054735425e5d496" kindref="member">Users</ref>(usersVEC,<sp/>user);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usersVEC.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system(</highlight><highlight class="stringliteral">&quot;cls&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>setw((xy.first<sp/>-<sp/>50)<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>(char)201;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>i++)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(char)205;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(char)187<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>setw((xy.first<sp/>-<sp/>50)<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>(char)186<sp/>&lt;&lt;<sp/>setw(51)<sp/>&lt;&lt;<sp/>(char)186<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>text<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Do<sp/>you<sp/>want<sp/>save<sp/>all<sp/>changes?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>setw((xy.first<sp/>-<sp/>50)<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>(char)186<sp/>&lt;&lt;<sp/>setw((50<sp/>+<sp/>text.length())<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>text<sp/>&lt;&lt;<sp/>setw(51<sp/>-<sp/>(50<sp/>+<sp/>text.length())<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>(char)186<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>setw((xy.first<sp/>-<sp/>50)<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>(char)186<sp/>&lt;&lt;<sp/>setw(51)<sp/>&lt;&lt;<sp/>(char)186<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>setw((xy.first<sp/>-<sp/>50)<sp/>/<sp/>2)<sp/>&lt;&lt;<sp/>(char)200;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>i++)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(char)205;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(char)188<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Yes<sp/>&apos;Y&apos;<sp/>or<sp/>No<sp/>&apos;N&apos;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>decision;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(decision<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal"><sp/>||<sp/>decision<sp/>==<sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal"><sp/>||<sp/>decision<sp/>==<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal"><sp/>||<sp/>decision<sp/>==<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Yes<sp/>&apos;Y&apos;<sp/>or<sp/>No<sp/>&apos;N&apos;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>decision;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//alteracao</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decision<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal"><sp/>||<sp/>decision<sp/>==<sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;users_temp.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decision<sp/>==<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal"><sp/>||<sp/>decision<sp/>==<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;users_temp.txt&quot;</highlight><highlight class="normal">);</highlight><highlight class="comment">//delete<sp/>file<sp/>temp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>save<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//elimina<sp/>usuario<sp/>no<sp/>vetor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usersVEC.erase(usersVEC.begin()<sp/>+<sp/><ref refid="utils_8cpp_1a9e6ae0faec755ce8693bfc0d4692e15c" kindref="member">BinaryInt</ref>(user,<sp/>usersVEC));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofstream<sp/>UserFileO(</highlight><highlight class="stringliteral">&quot;users_temp.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UserFileO.is_open())</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>usersVEC.size();<sp/>i++)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserFileO<sp/>&lt;&lt;<sp/>usersVEC.at(i)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserFileO.close();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="utils_8h_1acefd5a7062e81e56767fbfa11f6065e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utils_8cpp_1acefd5a7062e81e56767fbfa11f6065e4" kindref="member">readNameOfFile</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;<sp/>fileName)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name<sp/>of<sp/>File?&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>fileName;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fileName.find(</highlight><highlight class="stringliteral">&quot;.txt&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>fileName.length()<sp/>-<sp/>4)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>name<sp/>of<sp/>file<sp/>again&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cin<sp/>&gt;&gt;<sp/>fileName;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="utils.cpp"/>
  </compounddef>
</doxygen>
