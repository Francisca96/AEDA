.TH "Player" 3 "Sun Nov 20 2016" "Version 1.0.0.0" "Aeda-Casino" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Player \- A player\&. Abstract Class\&. \fBPlayer\fP is the base class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Player\&.h>\fP
.PP
Inherited by \fBBot0\fP, \fBBot1\fP, \fBBot2\fP, and \fBHuman\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBhit\fP (\fBCard\fP newCard)"
.br
.RI "Hits the given new card\&. Saves the card on the hand\&. Updates the handscore\&. "
.ti -1c
.RI "void \fBhit2\fP (\fBCard\fP newCard)"
.br
.RI "Hits the given new card\&. Saves the card on the hand2\&. Updates the hand2score\&. "
.ti -1c
.RI "virtual bool \fBtakeInsurance\fP (\fBTable\fP &table)"
.br
.RI "Take insurance\&. "
.ti -1c
.RI "virtual bool \fBsurrender\fP (\fBTable\fP &table)"
.br
.RI "Surrenders or not\&. When this method is called, it will check if the player wants to surrender\&. "
.ti -1c
.RI "virtual bool \fBsplit\fP (\fBDealer\fP *dealerOfTable)"
.br
.RI "Splits his hand or not\&. When this method is called it will apply an algorithm depending on the type of player, to check if the player wants to split his hand\&. "
.ti -1c
.RI "void \fBdoubleDown\fP ()"
.br
.RI "Double down\&. Doubles down the current bet\&. When a player doubles down, he will hit a new card, double is bet, and won't be allowed to play anymore until the end of the round\&. "
.ti -1c
.RI "vector< \fBCard\fP > & \fBgetHand\fP ()"
.br
.RI "Gets the hand\&. "
.ti -1c
.RI "vector< \fBCard\fP > & \fBgetHand2\fP ()"
.br
.RI "Gets the second hand\&. "
.ti -1c
.RI "unsigned int \fBgetHandSize\fP () const"
.br
.RI "Gets hand size\&. "
.ti -1c
.RI "unsigned int \fBgetRoundsPlayed\fP () const"
.br
.RI "Gets rounds played\&. "
.ti -1c
.RI "float \fBgetCurrentMoney\fP () const"
.br
.RI "Gets current money\&. "
.ti -1c
.RI "float \fBgetAverageProfit\fP () const"
.br
.RI "Gets average profit\&. "
.ti -1c
.RI "unsigned int \fBgetHandScore\fP () const"
.br
.RI "Gets hand score\&. "
.ti -1c
.RI "unsigned int \fBgetHand2Score\fP () const"
.br
.RI "Gets second hand score\&. "
.ti -1c
.RI "unsigned int \fBgetInitialMoney\fP () const"
.br
.RI "Gets initial money\&. "
.ti -1c
.RI "string \fBgetName\fP () const"
.br
.RI "Gets the name\&. "
.ti -1c
.RI "void \fBsetName\fP (string newName)"
.br
.RI "Sets a name\&. "
.ti -1c
.RI "unsigned int \fBsetHandScore\fP ()"
.br
.RI "Sets hand score\&. "
.ti -1c
.RI "unsigned int \fBsetHand2Score\fP ()"
.br
.RI "Sets second hand score\&. "
.ti -1c
.RI "void \fBsetCurrentMoney\fP (float money)"
.br
.RI "Sets current money\&. "
.ti -1c
.RI "void \fBsetRoundsPlayed\fP (unsigned int rounds)"
.br
.RI "Sets rounds played\&. "
.ti -1c
.RI "void \fBsetInitialMoney\fP (unsigned int money)"
.br
.RI "Sets initial money\&. "
.ti -1c
.RI "void \fBaddMoney\fP (float value)"
.br
.RI "Adds money to the player\&. "
.ti -1c
.RI "void \fBshowStatistics\fP ()"
.br
.RI "Shows the statistics\&. "
.ti -1c
.RI "virtual unsigned int \fBbet\fP (\fBTable\fP &table)"
.br
.RI "Bets an amount of money\&. If player is a kind of bot, it will bet accordingly to algorithms that are available on the internet\&. "
.ti -1c
.RI "void \fBclearHand\fP ()"
.br
.RI "Clears the hand\&. "
.ti -1c
.RI "void \fBclearHand2\fP ()"
.br
.RI "Clears the second hand\&. "
.ti -1c
.RI "void \fBsetActualBet\fP (unsigned int \fBbet\fP)"
.br
.RI "Sets actual bet\&. "
.ti -1c
.RI "unsigned int \fBgetActualBet\fP ()"
.br
.RI "Gets actual bet\&. "
.ti -1c
.RI "virtual string \fBplay\fP (\fBTable\fP &table)=0"
.br
.RI "Play consists of a method that decides what is the best move\&. All the bots have different implementations of this method\&. "
.ti -1c
.RI "virtual int \fBgetCurrentCount\fP () const"
.br
.RI "Gets current count\&. Different kinds of players may hold different counts\&. "
.ti -1c
.RI "virtual void \fBaddCount\fP (\fBCard\fP &card1)"
.br
.RI "Updates the current count with a given card\&. "
.ti -1c
.RI "virtual void \fBresetCount\fP ()"
.br
.RI "Resets the current count\&. Should be called when the deck is reshuffled or the table closes\&. "
.ti -1c
.RI "unsigned int \fBgetAge\fP () const"
.br
.RI "Gets the age\&. "
.ti -1c
.RI "void \fBsetAge\fP (unsigned int age)"
.br
.RI "Sets an age\&. "
.ti -1c
.RI "void \fBsetOnTable\fP (int tableID)"
.br
.RI "Sits on a table\&. -1 if the player is not on any table\&. "
.ti -1c
.RI "int \fBgetOnTable\fP () const"
.br
.RI "Gets if the player is on table or not\&. "
.ti -1c
.RI "void \fBremoveCardFromFirstHandAndSetItOnSecondHand\fP ()"
.br
.RI "Removes the card from first hand sets it on the second hand\&. "
.ti -1c
.RI "virtual void \fBsetUserID\fP (unsigned int userID)"
.br
.RI "Does nothing in class \fBPlayer\fP\&. But it is necessary for the human class\&. "
.ti -1c
.RI "virtual unsigned int \fBgetUserID\fP () const"
.br
.RI "Returns 0;\&. "
.ti -1c
.RI "virtual ostream & \fBsaveInfo\fP (ostream &out)"
.br
.RI "Writes player info to stream\&. "
.in -1c
.SH "Detailed Description"
.PP 
A player\&. Abstract Class\&. \fBPlayer\fP is the base class\&. 


.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Definition at line 245 of file Player\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void Player::addCount (\fBCard\fP & card1)\fC [virtual]\fP"

.PP
Updates the current count with a given card\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIcard1\fP The card that will try to update the count\&. 
.RE
.PP

.PP
Reimplemented in \fBBot2\fP, and \fBBot1\fP\&.
.PP
Definition at line 213 of file Player\&.cpp\&.
.PP
.nf
214 {
215 
216 }
.fi
.SS "void Player::addMoney (float value)"

.PP
Adds money to the player\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP The amount of money to be added\&. 
.RE
.PP

.PP
Definition at line 148 of file Player\&.cpp\&.
.PP
Referenced by Table::payToPlayer()\&.
.PP
.nf
149 {
150     currentMoney += value;
151 }
.fi
.SS "unsigned int Player::bet (\fBTable\fP & table)\fC [virtual]\fP"

.PP
Bets an amount of money\&. If player is a kind of bot, it will bet accordingly to algorithms that are available on the internet\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fItable\fP The table\&.
.RE
.PP
\fBReturns:\fP
.RS 4
An int\&. 
.RE
.PP

.PP
Reimplemented in \fBHuman\fP, \fBBot2\fP, and \fBBot1\fP\&.
.PP
Definition at line 174 of file Player\&.cpp\&.
.PP
References Table::getMinBet()\&.
.PP
.nf
175 {
176     if (getCurrentMoney() < table\&.getMinBet()) {
177         return 0; //0 means kick the player from the table;
178     }
179     unsigned int betValue = table\&.getMinBet();
180     setCurrentMoney(getCurrentMoney() - betValue);
181     cout << name << " bets " << betValue << "$\n";
182     setActualBet(betValue);
183     return betValue;
184 }
.fi
.SS "void Player::clearHand ()"

.PP
Clears the hand\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Definition at line 186 of file Player\&.cpp\&.
.PP
.nf
187 {
188     hand\&.clear();
189     this->setHandScore();
190 }
.fi
.SS "void Player::clearHand2 ()"

.PP
Clears the second hand\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Definition at line 192 of file Player\&.cpp\&.
.PP
.nf
193 {
194     hand2\&.clear();
195     this->setHand2Score();
196 }
.fi
.SS "void Player::doubleDown ()"

.PP
Double down\&. Doubles down the current bet\&. When a player doubles down, he will hit a new card, double is bet, and won't be allowed to play anymore until the end of the round\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Definition at line 35 of file Player\&.cpp\&.
.PP
.nf
35                         {
36     throw "Not yet implemented";
37 }
.fi
.SS "unsigned int Player::getActualBet ()"

.PP
Gets actual bet\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The actual bet\&. 
.RE
.PP

.PP
Definition at line 203 of file Player\&.cpp\&.
.PP
.nf
204 {
205     return actualBet;
206 }
.fi
.SS "unsigned int Player::getAge () const"

.PP
Gets the age\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The player's age\&. 
.RE
.PP

.PP
Definition at line 223 of file Player\&.cpp\&.
.PP
.nf
223                                   {
224     return this->age;
225 }
.fi
.SS "float Player::getAverageProfit () const"

.PP
Gets average profit\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The average profit\&. 
.RE
.PP

.PP
Definition at line 107 of file Player\&.cpp\&.
.PP
.nf
108 {
109     return averageProfit;
110 }
.fi
.SS "int Player::getCurrentCount () const\fC [virtual]\fP"

.PP
Gets current count\&. Different kinds of players may hold different counts\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The current count\&. 
.RE
.PP

.PP
Reimplemented in \fBBot2\fP, and \fBBot1\fP\&.
.PP
Definition at line 208 of file Player\&.cpp\&.
.PP
.nf
209 {
210     return 0;
211 }
.fi
.SS "float Player::getCurrentMoney () const"

.PP
Gets current money\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The current money\&. 
.RE
.PP

.PP
Definition at line 118 of file Player\&.cpp\&.
.PP
.nf
119 {
120     return currentMoney;
121 }
.fi
.SS "vector< \fBCard\fP > & Player::getHand ()"

.PP
Gets the hand\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The hand\&. 
.RE
.PP

.PP
Definition at line 39 of file Player\&.cpp\&.
.PP
.nf
40 {
41     return hand;
42 }
.fi
.SS "vector< \fBCard\fP > & Player::getHand2 ()"

.PP
Gets the second hand\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The second hand\&. 
.RE
.PP

.PP
Definition at line 44 of file Player\&.cpp\&.
.PP
.nf
45 {
46     return hand2;
47 }
.fi
.SS "unsigned int Player::getHand2Score () const"

.PP
Gets second hand score\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The second hand score\&. 
.RE
.PP

.PP
Definition at line 92 of file Player\&.cpp\&.
.PP
.nf
93 {
94     return hand2Score;
95 }
.fi
.SS "unsigned int Player::getHandScore () const"

.PP
Gets hand score\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The hand score\&. 
.RE
.PP

.PP
Definition at line 87 of file Player\&.cpp\&.
.PP
.nf
88 {
89     return handScore;
90 }
.fi
.SS "unsigned int Player::getHandSize () const"

.PP
Gets hand size\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The hand size\&. 
.RE
.PP

.PP
Definition at line 49 of file Player\&.cpp\&.
.PP
.nf
50 {
51     return hand\&.size();
52 }
.fi
.SS "unsigned int Player::getInitialMoney () const"

.PP
Gets initial money\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The initial money\&. 
.RE
.PP

.PP
Definition at line 123 of file Player\&.cpp\&.
.PP
.nf
124 {
125     return initialMoney;
126 }
.fi
.SS "string Player::getName () const"

.PP
Gets the name\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The name\&. 
.RE
.PP

.PP
Definition at line 97 of file Player\&.cpp\&.
.PP
Referenced by Casino::addPlayerToCasino(), HumanOnTableException::HumanOnTableException(), PlayerAlreadyExistException::PlayerAlreadyExistException(), PlayerNotLoggedException::PlayerNotLoggedException(), and PlayerStillOnTableException::PlayerStillOnTableException()\&.
.PP
.nf
98 {
99     return name;
100 }
.fi
.SS "int Player::getOnTable () const"

.PP
Gets if the player is on table or not\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
ID of the table\&. -1 if the player is not on any table\&. 
.RE
.PP

.PP
Definition at line 235 of file Player\&.cpp\&.
.PP
Referenced by PlayerStillOnTableException::PlayerStillOnTableException()\&.
.PP
.nf
235                              {
236     return this->onTable;
237 }
.fi
.SS "unsigned int Player::getRoundsPlayed () const"

.PP
Gets rounds played\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The rounds played\&. 
.RE
.PP

.PP
Definition at line 130 of file Player\&.cpp\&.
.PP
.nf
131 {
132     return roundsPlayed;
133 }
.fi
.SS "unsigned int Player::getUserID () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Returns 0;\&. 
.PP
\fBReturns:\fP
.RS 4
0\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Reimplemented in \fBHuman\fP\&.
.PP
Definition at line 816 of file Player\&.h\&.
.PP
.nf
816 { return 0; }
.fi
.SS "void Player::hit (\fBCard\fP newCard)"

.PP
Hits the given new card\&. Saves the card on the hand\&. Updates the handscore\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fInewCard\fP The new card\&. 
.RE
.PP

.PP
Definition at line 20 of file Player\&.cpp\&.
.PP
.nf
20                              {
21     hand\&.push_back(newCard);
22     setHandScore();
23 }
.fi
.SS "void Player::hit2 (\fBCard\fP newCard)"

.PP
Hits the given new card\&. Saves the card on the hand2\&. Updates the hand2score\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fInewCard\fP The new card\&. 
.RE
.PP

.PP
Definition at line 25 of file Player\&.cpp\&.
.PP
.nf
25                               {
26     hand2\&.push_back(newCard);
27     setHand2Score();
28 }
.fi
.SS "string Player::play (\fBTable\fP & table)\fC [pure virtual]\fP"

.PP
Play consists of a method that decides what is the best move\&. All the bots have different implementations of this method\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fItable\fP The table that the player is on\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A string with the option selected, 'hit','stand' or 'double'\&. 
.RE
.PP

.PP
Implemented in \fBHuman\fP, \fBBot2\fP, \fBBot1\fP, and \fBBot0\fP\&.
.SS "void Player::removeCardFromFirstHandAndSetItOnSecondHand ()"

.PP
Removes the card from first hand sets it on the second hand\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Definition at line 239 of file Player\&.cpp\&.
.PP
.nf
240 {
241     Card secondCard = hand\&.at(1);
242     hand\&.pop_back();
243     hand2\&.push_back(secondCard);
244 }
.fi
.SS "void Player::resetCount ()\fC [virtual]\fP"

.PP
Resets the current count\&. Should be called when the deck is reshuffled or the table closes\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Reimplemented in \fBBot2\fP, and \fBBot1\fP\&.
.PP
Definition at line 218 of file Player\&.cpp\&.
.PP
.nf
219 {
220 }
.fi
.SS "ostream & Player::saveInfo (ostream & out)\fC [virtual]\fP"

.PP
Writes player info to stream\&. 
.PP
\fBParameters:\fP
.RS 4
\fIout\fP ostream in which player info will be saved\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBPlayer\fP info in a ostream 
.RE
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Reimplemented in \fBHuman\fP, \fBBot2\fP, \fBBot1\fP, and \fBBot0\fP\&.
.PP
Definition at line 246 of file Player\&.cpp\&.
.PP
Referenced by Bot0::saveInfo(), Bot1::saveInfo(), Bot2::saveInfo(), and Human::saveInfo()\&.
.PP
.nf
246                                         {
247     out << name << "; " << initialMoney << "; " << setprecision(2) << fixed << currentMoney << "; ";
248     if (hand\&.size() != 0)
249     {
250         out << "{";
251     }
252     for (size_t i = 0; i < hand\&.size(); i++)
253     {
254         out << hand\&.at(i)\&.rank << "/" << hand\&.at(i)\&.suits << "/" << hand\&.at(i)\&.score << "; ";
255     }
256     if (hand\&.size() != 0)
257     {
258         out << "}; ";
259     }
260     if (hand2\&.size() != 0)
261     {
262         out << "{";
263     }
264     for (size_t i = 0; i < hand2\&.size(); i++)
265     {
266         out << hand2\&.at(i)\&.rank << "/" << hand2\&.at(i)\&.suits << "/" << hand2\&.at(i)\&.score << "; ";
267     }
268     if (hand2\&.size() != 0)
269     {
270         out << "}; ";
271     }
272     out << roundsPlayed << "; " << age << "; " << onTable << "; " << actualBet << "; ";
273     return out;
274 }
.fi
.SS "void Player::setActualBet (unsigned int bet)"

.PP
Sets actual bet\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIbet\fP The money to bet\&. 
.RE
.PP

.PP
Definition at line 198 of file Player\&.cpp\&.
.PP
.nf
199 {
200     actualBet = bet;
201 }
.fi
.SS "void Player::setAge (unsigned int age)"

.PP
Sets an age\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIage\fP The age\&. 
.RE
.PP

.PP
Definition at line 227 of file Player\&.cpp\&.
.PP
.nf
227                                     {
228     this->age = age;
229 }
.fi
.SS "void Player::setCurrentMoney (float money)"

.PP
Sets current money\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fImoney\fP The money\&. 
.RE
.PP

.PP
Definition at line 112 of file Player\&.cpp\&.
.PP
.nf
113 {
114     currentMoney = money;
115 }
.fi
.SS "unsigned int Player::setHand2Score ()"

.PP
Sets second hand score\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The second hand score\&. 
.RE
.PP

.PP
Definition at line 70 of file Player\&.cpp\&.
.PP
.nf
71 {
72     this->hand2Score = 0;
73     for (size_t i = 0; i < hand2\&.size(); i++)
74     {
75         this->hand2Score += hand2\&.at(i)\&.score;
76     }
77     if (hand2Score > 21) {
78         for (size_t i = 0; i < hand2\&.size(); i++) {
79             if (hand2\&.at(i)\&.score == 11 && hand2Score > 21) {
80                 this->hand2Score -= 10;
81             }
82         }
83     }
84     return this->hand2Score;
85 }
.fi
.SS "unsigned int Player::setHandScore ()"

.PP
Sets hand score\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The current hand score\&. 
.RE
.PP

.PP
Definition at line 54 of file Player\&.cpp\&.
.PP
.nf
54                                   {
55     this->handScore = 0;
56     for (size_t i = 0; i < hand\&.size(); i++)
57     {
58         this->handScore += hand\&.at(i)\&.score;
59     }
60     if (handScore > 21) {
61         for (size_t i = 0; i < hand\&.size(); i++) {
62             if (hand\&.at(i)\&.score == 11 && handScore > 21) {
63                 this->handScore -= 10;
64             }
65         }
66     }
67     return this->handScore;
68 }
.fi
.SS "void Player::setInitialMoney (unsigned int money)"

.PP
Sets initial money\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fImoney\fP The money\&. 
.RE
.PP

.PP
Definition at line 140 of file Player\&.cpp\&.
.PP
Referenced by Casino::readPlayersFile()\&.
.PP
.nf
141 {
142     initialMoney = money;
143     currentMoney = initialMoney;
144     averageProfit = 0;
145     roundsPlayed = 0;
146 }
.fi
.SS "void Player::setName (string newName)"

.PP
Sets a name\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fInewName\fP Name of the player\&. 
.RE
.PP

.PP
Definition at line 102 of file Player\&.cpp\&.
.PP
.nf
103 {
104     name = newName;
105 }
.fi
.SS "void Player::setOnTable (int tableID)"

.PP
Sits on a table\&. -1 if the player is not on any table\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fItableID\fP Identifier for the table\&. 
.RE
.PP

.PP
Definition at line 231 of file Player\&.cpp\&.
.PP
Referenced by Table::addPlayer()\&.
.PP
.nf
231                                    {
232     this->onTable = tableID;
233 }
.fi
.SS "void Player::setRoundsPlayed (unsigned int rounds)"

.PP
Sets rounds played\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIrounds\fP The number of rounds\&. 
.RE
.PP

.PP
Definition at line 135 of file Player\&.cpp\&.
.PP
.nf
136 {
137     roundsPlayed = rounds;
138 }
.fi
.SS "void Player::setUserID (unsigned int userID)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Does nothing in class \fBPlayer\fP\&. But it is necessary for the human class\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Reimplemented in \fBHuman\fP\&.
.PP
Definition at line 805 of file Player\&.h\&.
.PP
.nf
805 {}
.fi
.SS "void Player::showStatistics ()"

.PP
Shows the statistics\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016 
.RE
.PP

.PP
Definition at line 153 of file Player\&.cpp\&.
.PP
.nf
154 {
155     averageProfit = (float)((currentMoney - initialMoney) / float(roundsPlayed));
156     
157     Bot0 *bot0 = dynamic_cast<Bot0*> (this);
158     Bot1 *bot1 = dynamic_cast<Bot1*> (this);
159     Bot2 *bot2 = dynamic_cast<Bot2*> (this);
160     cout << setw(15) << "Bot " << name;
161     if (bot0 != nullptr) {
162         cout << setw(15) << "0";
163     }
164     else if (bot1 != nullptr){
165         cout << setw(15) << "1";
166     }
167     else if (bot2 != nullptr) {
168         cout << setw(15) << "2";
169     }
170     cout << setw(15) << roundsPlayed << setw(30) << setprecision(2) <<averageProfit << " $/round\n";
171 
172 }
.fi
.SS "bool Player::split (\fBDealer\fP * dealerOfTable)\fC [virtual]\fP"

.PP
Splits his hand or not\&. When this method is called it will apply an algorithm depending on the type of player, to check if the player wants to split his hand\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdealerOfTable\fP Pointer to the dealer of the table\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if it succeeds, false if it fails\&. 
.RE
.PP

.PP
Reimplemented in \fBHuman\fP, \fBBot2\fP, and \fBBot1\fP\&.
.PP
Definition at line 285 of file Player\&.cpp\&.
.PP
.nf
285                                        {
286     return false;
287 }
.fi
.SS "bool Player::surrender (\fBTable\fP & table)\fC [virtual]\fP"

.PP
Surrenders or not\&. When this method is called, it will check if the player wants to surrender\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fItable\fP The table that the player is on\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if it succeeds, false if it fails\&. 
.RE
.PP

.PP
Reimplemented in \fBBot2\fP, and \fBBot1\fP\&.
.PP
Definition at line 280 of file Player\&.cpp\&.
.PP
.nf
281 {
282     return false;
283 }
.fi
.SS "bool Player::takeInsurance (\fBTable\fP & table)\fC [virtual]\fP"

.PP
Take insurance\&. 
.PP
\fBAuthor:\fP
.RS 4
Joao Carvalho 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fItable\fP The table that the player is on\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if it succeeds, false if it fails\&. 
.RE
.PP

.PP
Reimplemented in \fBHuman\fP, \fBBot2\fP, \fBBot1\fP, and \fBBot0\fP\&.
.PP
Definition at line 276 of file Player\&.cpp\&.
.PP
.nf
276                                       {
277     return false;
278 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Aeda-Casino from the source code\&.
