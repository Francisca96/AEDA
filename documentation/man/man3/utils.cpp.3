.TH "utils.cpp" 3 "Sun Nov 20 2016" "Version 1.0.0.0" "Aeda-Casino" \" -*- nroff -*-
.ad l
.nh
.SH NAME
utils.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'utils\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &out, const \fBCard\fP &c)"
.br
.RI "Stream insertion operator\&. Makes the display of a card on the terminal\&. "
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &out, const vector< \fBCard\fP > &v)"
.br
.RI "Stream insertion operator\&. "
.ti -1c
.RI "vector< \fBCard\fP > \fBcreateDeck\fP ()"
.br
.RI "Creates the deck\&. "
.ti -1c
.RI "string \fBgetHumanPlay\fP ()"
.br
.RI "Gets human play\&. "
.ti -1c
.RI "unsigned short int \fBreadUnsignedIntBetween\fP (unsigned int minValue, unsigned int maxValue)"
.br
.RI "Reads unsigned int between a minimum and a maximum values\&. Ask for user input\&. "
.ti -1c
.RI "int \fBreadIntBetween\fP (int min, int max)"
.br
.RI "Reads int between a minimum and a maximum values\&. Ask for user input\&. "
.ti -1c
.RI "unsigned int \fBreadUnsignedInt\fP ()"
.br
.RI "Reads unsigned int\&. Asks for user input\&. "
.ti -1c
.RI "int \fBreadInt\fP ()"
.br
.RI "Reads a int value\&. Asks for user input\&. "
.ti -1c
.RI "int \fBreadBinary\fP ()"
.br
.RI "Reads a 0 or a 1 from user input\&. "
.ti -1c
.RI "float \fBreadFloat\fP ()"
.br
.RI "Reads a float from user input\&. "
.ti -1c
.RI "char \fBreadCharYorN\fP ()"
.br
.RI "Reads character 'y' or 'n'\&. Case insensitive\&. "
.ti -1c
.RI "void \fBUsers\fP (vector< int > &usersVEC, int &user)"
.br
.RI "Reads and parses the users file to usersVec\&. "
.ti -1c
.RI "void \fBFileCopy\fP (string filetxt, string filetxt_temp)"
.br
.RI "Copies text between files\&. "
.ti -1c
.RI "bool \fBFileExist\fP (string filetxt_temp)"
.br
.RI "Checks if the file with name filetxt_temp exists\&. "
.ti -1c
.RI "int \fBBinaryInt\fP (int id, vector< int > VEC)"
.br
.RI "Performs a binary search of id in VEC\&. "
.ti -1c
.RI "int \fBsaveChanges\fP (vector< int > &usersVEC, int &user, pair< int, int > xy, int &save)"
.br
.RI "Asks user to save the current status when exiting\&. "
.ti -1c
.RI "int \fBreadNameOfFile\fP (string &fileName)"
.br
.RI "Ask user to input a file name\&. "
.ti -1c
.RI "void \fBwaitXTime\fP (unsigned int time)"
.br
.RI "Sleeps for a given time\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "int BinaryInt (int id, vector< int > VEC)"

.PP
Performs a binary search of id in VEC\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The identifier\&. 
.br
\fIVEC\fP The vector\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The index of id in Vec, or -1 if id was not found\&. 
.RE
.PP

.PP
Definition at line 255 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<(), and saveChanges()\&.
.PP
.nf
255                                         {
256     int lowindex = 0;
257     int highindex = VEC\&.size() - 1;
258     int i = -1;
259     while (lowindex <= highindex)
260     {
261         i = (highindex + lowindex) / 2;
262         if (id == VEC\&.at(i))
263         {
264             return i;
265         }
266         else if (id < VEC\&.at(i))
267         {
268             highindex = i - 1;
269         }
270         else if (id > VEC\&.at(i))
271         {
272             lowindex = i + 1;
273         }
274     }
275     return -1;
276 }
.fi
.SS "vector< \fBCard\fP > createDeck ()"

.PP
Creates the deck\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The new deck\&. 
.RE
.PP

.PP
Definition at line 15 of file utils\&.cpp\&.
.PP
References Card::rank, Card::score, and Card::suits\&.
.PP
Referenced by Dealer::Dealer(), and Card::operator<<()\&.
.PP
.nf
15                           {
16     vector <string> suits = {"Heart" ,"Diamond" ,"Club" ,"Spade"};
17     string ranks = "A234567890JQK";
18     Card newCard;
19     vector <Card> deck;
20 
21     for (unsigned int i = 0; i < ranks\&.length(); i++)
22     {
23         for (size_t j = 0; j < suits\&.size(); j++)
24         {
25             if (i == 0)
26             {
27                 newCard\&.suits = suits\&.at(j);
28                 newCard\&.rank = ranks\&.at(i);
29                 newCard\&.score = 11;
30             }
31             else if (i < 9)
32             {
33                 newCard\&.suits = suits\&.at(j);
34                 newCard\&.rank = ranks\&.at(i);
35                 newCard\&.score = i + 1;
36             }
37             else if (i == 9)
38             {
39                 newCard\&.suits = suits\&.at(j);
40                 newCard\&.rank = "10";
41                 newCard\&.score = i + 1;
42             }
43             else if (i >= 1)
44             {
45                 newCard\&.suits = suits\&.at(j);
46                 newCard\&.rank = ranks\&.at(i);
47                 newCard\&.score = 10;
48             }
49             deck\&.push_back(newCard);
50         }
51     }
52     return deck;
53 }
.fi
.SS "void FileCopy (string filetxt, string filetxt_temp)"

.PP
Copies text between files\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIfiletxt\fP The file name; 
.br
\fIfiletxt_temp\fP The temporary file name; 
.RE
.PP

.PP
Definition at line 227 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<()\&.
.PP
.nf
227                                                    {
228     ofstream File(filetxt);
229     ifstream File_temp(filetxt_temp);
230     string line;
231     if (File\&.is_open() && File_temp\&.is_open())
232     {
233         while (getline(File_temp, line))
234         {
235             File << line << endl;
236         }
237         File\&.close();
238         File_temp\&.close();
239     }
240 }
.fi
.SS "bool FileExist (string filetxt_temp)"

.PP
Checks if the file with name filetxt_temp exists\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIfiletxt_temp\fP The temporary file name;
.RE
.PP
\fBReturns:\fP
.RS 4
True if it exists, false otherwise\&. 
.RE
.PP

.PP
Definition at line 242 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<(), and Table::play()\&.
.PP
.nf
242                                     {
243     ifstream file(filetxt_temp);
244     if (file\&.is_open())
245     {
246         file\&.close();
247         return true;
248     }
249     else
250     {
251         return false;
252     }
253 }
.fi
.SS "string getHumanPlay ()"

.PP
Gets human play\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The human play\&. 
.RE
.PP

.PP
Definition at line 55 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<(), and Human::play()\&.
.PP
.nf
56 {
57     string option;
58     getline(cin, option);
59     while (option != "hit" && option != "stand" && option != "HIT" && option != "STAND" && option != "Hit" && option != "Stand" && option != "EXIT" && option != "Exit" && option != "exit") {
60         cout << "Please insert a valid entry: ";
61         getline(cin, option);
62     }
63     if (option == "HIT" || option == "Hit") {
64         option = "hit";
65     }
66     else if (option == "Stand" || option == "STAND") {
67         option = "stand";
68     }
69     else if (option == "Exit" || option == "EXIT")
70     {
71         option = "exit";
72     }
73     return option;
74 }
.fi
.SS "std::ostream & operator<< (std::ostream & out, const \fBCard\fP & c)"

.PP
Stream insertion operator\&. Makes the display of a card on the terminal\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIout\fP The outstream\&. 
.br
\fIc\fP The \fBCard\fP to process\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The ostream produced\&. 
.RE
.PP

.PP
Definition at line 6 of file utils\&.cpp\&.
.PP
References Card::rank, and Card::suits\&.
.PP
Referenced by Card::operator<<()\&.
.PP
.nf
6                                                        {
7     return out << c\&.rank << c\&.suits;
8 }
.fi
.SS "std::ostream & operator<< (std::ostream & out, const vector< \fBCard\fP > & v)"

.PP
Stream insertion operator\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIout\fP The outstream\&. 
.br
\fIv\fP The vector of cards to process\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The ostream produced\&. 
.RE
.PP

.PP
Definition at line 9 of file utils\&.cpp\&.
.PP
.nf
9                                                                {
10     for (size_t i = 0; i < v\&.size(); i++) {
11         out << v\&.at(i) << " ; ";
12     }
13     return out << "\n";
14 }
.fi
.SS "int readBinary ()"

.PP
Reads a 0 or a 1 from user input\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The user input\&. 
.RE
.PP

.PP
Definition at line 133 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<(), Human::split(), and Human::takeInsurance()\&.
.PP
.nf
133                 {
134     int value;
135     cin >> value;
136 
137     while (value != 0 || value != 1){
138         cout << endl;
139         cin\&.clear();
140         cin\&.ignore();
141         cout << "Valor invÃ¡lido, insira 0 ou 1: ";
142     }
143     cin\&.ignore();
144     cout << endl;
145     return value;
146 }
.fi
.SS "char readCharYorN ()"

.PP
Reads character 'y' or 'n'\&. Case insensitive\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The character inserted by the user: 'y' or 'n'\&. 
.RE
.PP

.PP
Definition at line 161 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<(), and Table::play()\&.
.PP
.nf
161                     {
162     char newChar;
163     cout << "Insira o caracter: ";
164     while (!(cin >> newChar) || (newChar != 'n' && newChar != 'N' && newChar != 'Y' && newChar != 'y')) {
165         cout << endl;
166         cin\&.clear();
167         cin\&.ignore();
168         cout << "Caracter invalido, insira um novo caracter: ";
169     }
170     cin\&.ignore();
171     cout << endl;
172     return newChar;
173 }
.fi
.SS "float readFloat ()"

.PP
Reads a float from user input\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The float inputed by the user\&. 
.RE
.PP

.PP
Definition at line 148 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<()\&.
.PP
.nf
148                   {
149     float newFloat;
150     cout << "Insira um novo valor: ";
151     while (!(cin >> newFloat)) {
152         cout << endl;
153         cin\&.clear();
154         cin\&.ignore();
155         cout << "Valor invalido, insira um novo valor: ";
156     }
157     cin\&.ignore();
158     cout << endl;
159     return newFloat;
160 }
.fi
.SS "int readInt ()"

.PP
Reads a int value\&. Asks for user input\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The int inserted by the user\&. 
.RE
.PP

.PP
Definition at line 119 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<(), and Casino::selectTable()\&.
.PP
.nf
119               {
120     int newInt;
121     cout << "Insira um valor: ";
122     while (!(cin >> newInt)) {
123         cout << endl;
124         cin\&.clear();
125         cin\&.ignore();
126         cout << "Valor invÃ¡lido, insira um novo valor unsigned int: ";
127     }
128     cin\&.ignore();
129     cout << endl;
130     return newInt;
131 }
.fi
.SS "int readIntBetween (int min, int max)"

.PP
Reads int between a minimum and a maximum values\&. Ask for user input\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fImin\fP The minimum\&. 
.br
\fImax\fP The maximum\&.
.RE
.PP
\fBReturns:\fP
.RS 4
The int between the parameters set\&. 
.RE
.PP

.PP
Definition at line 91 of file utils\&.cpp\&.
.PP
Referenced by createMenu(), deleteMenu(), manageCasino(), manageTableMenu(), Card::operator<<(), and start_menu()\&.
.PP
.nf
91                                     {
92     int newInt;
93     cout << "Insert a value: ";
94     while(!(cin >> newInt) || newInt > max || newInt < min) {
95         cout << endl;
96         cin\&.clear();
97         cin\&.ignore();
98         cout << "Wrong value, value between " << min << " - " << max;
99     }
100     cin\&.ignore();
101     cout << endl;
102     return newInt;
103 }
.fi
.SS "int readNameOfFile (string & fileName)"

.PP
Ask user to input a file name\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP A string that will be updated with the user input\&.
.RE
.PP
\fBReturns:\fP
.RS 4
0 in case of success\&. 
.RE
.PP

.PP
Definition at line 338 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<()\&.
.PP
.nf
338                                       {
339     cout << "Name of File?" << endl;
340     cin >> fileName;
341     while (fileName\&.find("\&.txt") != fileName\&.length() - 4)
342     {
343         cout << "Write name of file again" << endl;
344         cin >> fileName;
345     }
346     return 0;
347 }
.fi
.SS "unsigned int readUnsignedInt ()"

.PP
Reads unsigned int\&. Asks for user input\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBReturns:\fP
.RS 4
The unsigned int\&. 
.RE
.PP

.PP
Definition at line 105 of file utils\&.cpp\&.
.PP
Referenced by Casino::create(), Casino::eliminate(), main(), Casino::manage(), Casino::manageTables(), and Card::operator<<()\&.
.PP
.nf
105                                {
106     unsigned int newUnsignedInt;
107     cout << "Insira um valor: ";
108     while (!(cin >> newUnsignedInt)) {
109         cout << endl;
110         cin\&.clear();
111         cin\&.ignore();
112 
113         cout << "Valor invÃ¡lido, insira um novo valor unsigned int: ";
114     }
115     cin\&.ignore();
116     cout << endl;
117     return newUnsignedInt;
118 }
.fi
.SS "unsigned short int readUnsignedIntBetween (unsigned int minValue, unsigned int maxValue)"

.PP
Reads unsigned int between a minimum and a maximum values\&. Ask for user input\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIminValue\fP The minimum value\&. 
.br
\fImaxValue\fP The maximum value\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A unsigned int between the parameters set\&. 
.RE
.PP

.PP
Definition at line 76 of file utils\&.cpp\&.
.PP
Referenced by Human::bet(), Casino::create(), Card::operator<<(), and Table::play()\&.
.PP
.nf
76                                                                                         {
77     unsigned int short newInt;
78     cout << "Insert Value ( " << minValue << " - " << maxValue << " ) : ";
79     while (!(cin >> newInt) || newInt > maxValue || newInt < minValue) {
80         cout << endl;
81         cin\&.clear();
82         cin\&.ignore();
83         cout << "Invalid Value: Insert a new one: ";
84     }
85     cin\&.ignore();
86     cout << endl;
87     return newInt;
88 }
.fi
.SS "int saveChanges (vector< int > & usersVEC, int & user, pair< int, int > xy, int & save)"

.PP
Asks user to save the current status when exiting\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIusersVEC\fP The users vector\&. 
.br
\fIuser\fP The user id\&. 
.br
\fIxy\fP Pair with horizontal and vertical lengths of the terminal\&. 
.br
\fIsave\fP Boolean that holds user option to save or not the changes made\&.
.RE
.PP
\fBReturns:\fP
.RS 4
0 in case of operation success\&. 
.RE
.PP

.PP
Definition at line 278 of file utils\&.cpp\&.
.PP
References BinaryInt(), and Users()\&.
.PP
Referenced by main(), and Card::operator<<()\&.
.PP
.nf
278                                                                                   {
279     char decision;
280     Users(usersVEC, user);
281     if (usersVEC\&.size() == 1)
282     {
283         system("cls");
284         cout << setw((xy\&.first - 50) / 2) << (char)201;
285         for (int i = 0; i < 50; i++)
286         {
287             cout << (char)205;
288         }
289         cout << (char)187 << endl;
290         cout << setw((xy\&.first - 50) / 2) << (char)186 << setw(51) << (char)186 << endl;
291         string text = "Do you want save all changes?";
292         cout << setw((xy\&.first - 50) / 2) << (char)186 << setw((50 + text\&.length()) / 2) << text << setw(51 - (50 + text\&.length()) / 2) << (char)186 << endl;
293         cout << setw((xy\&.first - 50) / 2) << (char)186 << setw(51) << (char)186 << endl;
294         cout << setw((xy\&.first - 50) / 2) << (char)200;
295         for (int i = 0; i < 50; i++)
296         {
297             cout << (char)205;
298         }
299         cout << (char)188 << endl;
300         cout << endl << "Yes 'Y' or No 'N': ";
301         cin >> decision;
302         while (!(decision == 'Y' || decision == 'y' || decision == 'N' || decision == 'n'))
303         {
304             cout << endl << "Yes 'Y' or No 'N': ";
305             cin >> decision;
306         }
307 
308         //alteracao
309         if (decision == 'Y' || decision == 'y')
310         {
311             remove("users_temp\&.txt");
312             save = 1;
313         }
314         else if (decision == 'N' || decision == 'n')
315         {
316             remove("users_temp\&.txt");//delete file temp
317             save = 0;
318         }
319     }
320     else
321     {
322         //elimina usuario no vetor
323         usersVEC\&.erase(usersVEC\&.begin() + BinaryInt(user, usersVEC));
324 
325         ofstream UserFileO("users_temp\&.txt");
326         if (UserFileO\&.is_open())
327         {
328             for (unsigned int i = 0; i < usersVEC\&.size(); i++)
329             {
330                 UserFileO << usersVEC\&.at(i) << endl;
331             }
332             UserFileO\&.close();
333         }
334     }
335     return 0;
336 }
.fi
.SS "void Users (vector< int > & usersVEC, int & user)"

.PP
Reads and parses the users file to usersVec\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
19/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fIusersVEC\fP The users vector\&. 
.br
\fIuser\fP The user id\&. 
.RE
.PP

.PP
Definition at line 177 of file utils\&.cpp\&.
.PP
Referenced by main(), Card::operator<<(), and saveChanges()\&.
.PP
.nf
177                                               {
178     string line;
179     ifstream UserFileI("users_temp\&.txt");
180     int find = 0;
181     if (UserFileI\&.is_open())
182     {
183         usersVEC\&.clear();
184         while (getline(UserFileI, line)) //enquanto houver linhas no ficheiro
185         {
186             usersVEC\&.push_back(stoi(line, nullptr, 10));
187         }
188         UserFileI\&.close();
189         for (unsigned int i = 0; i < usersVEC\&.size(); i++)
190         {
191             if (user == usersVEC\&.at(i))
192             {
193                 find = 1;
194             }
195         }
196         if (find == 0)
197         {
198             if (usersVEC\&.size() != 0)
199             {
200                 usersVEC\&.push_back(usersVEC\&.back() + 1);
201                 user = usersVEC\&.back();
202             }
203             else
204             {
205                 usersVEC\&.push_back(1);
206                 user = usersVEC\&.back();
207             }
208         }
209     }
210     else
211     {
212         usersVEC\&.push_back(1);
213         user = usersVEC\&.back();
214     }
215 
216     ofstream UserFileO("users_temp\&.txt");
217     if (UserFileO\&.is_open())
218     {
219         for (unsigned int i = 0; i < usersVEC\&.size(); i++)
220         {
221             UserFileO << usersVEC\&.at(i) << endl;
222         }
223         UserFileO\&.close();
224     }
225 }
.fi
.SS "void waitXTime (unsigned int time)"

.PP
Sleeps for a given time\&. 
.PP
\fBAuthor:\fP
.RS 4
Renato Campos 
.RE
.PP
\fBDate:\fP
.RS 4
20/11/2016
.RE
.PP
\fBParameters:\fP
.RS 4
\fItime\fP The time in seconds\&. 
.RE
.PP

.PP
Definition at line 349 of file utils\&.cpp\&.
.PP
Referenced by Card::operator<<(), Table::play(), Table::readTableFile(), and Table::writeTableFile()\&.
.PP
.nf
349                                   {
350     clock_t t1 = clock();
351     float seconds_past = 0\&.0;
352     while (seconds_past < time)
353     {
354         seconds_past = (clock() - t1) / CLOCKS_PER_SEC;
355     }
356     return;
357 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Aeda-Casino from the source code\&.
